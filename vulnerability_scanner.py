import os 
import re
import copy 

# inputs: a set of blacklisted directories, an optional current directory, and an optional set of files to scan
# output: a set of files to scan for vulenrabilities
# *** note: you should not pass in an argument for files_to_scan. This argument is only used when this function is 
# recursively calling itself *** 
def getSubFiles(blacklisted_directories, current_directory = os.getcwd(), files_to_scan = set()):

    # do not inspect blacklisted directories 
    for blacklisted_folder in blacklisted_directories: 
        if "\\" + blacklisted_folder + "\\" in current_directory:
            return files_to_scan
    
    # get all subresources in current directory  
    sub_folders_and_files = os.listdir(current_directory)  

    # for each subresource, get its full path
    # if resource is a directory, recurse and search that directory
    # otherwise, check if file is a python file. If so, save it to file_list 
    for sub_resource in sub_folders_and_files:
        full_path = os.path.join(current_directory, sub_resource) # form the absolute path 

        # if the resource is a directory, recurse and look for files   
        if os.path.isdir(full_path): 
            getSubFiles(blacklisted_directories, full_path, files_to_scan)
        
        # if resource is not a directory and is a python file, add it to list  
        else:
            if full_path.endswith(".py"):
                files_to_scan.add(full_path)

    return files_to_scan

# inputs: a set containing the files to be scanned
# output: a list containing SQL injection vulnerabilites 
def scan_files(files_to_scan):
    
    results = []

    for curr_file in files_to_scan:
        with open(curr_file, "r") as f:
            file_as_string = f.read()
            # get set of vulnerabilites in file 
            vulnerability_set = check_for_vulnerability(file_as_string)
            # check that every potential vulnerability contains a SQL keyword. If it doesn't, discard from set
            parse_vulnerable_set(vulnerability_set)
            vulnerability_info = (curr_file, vulnerability_set) 
            results.append(vulnerability_info)

    return results 

# input: a set containing flagged potential vulnerabilities 
def parse_vulnerable_set(vulnerable_set):
    
    for flagged_code in copy.deepcopy(vulnerable_set):
        if check_statements_for_SQL_query_words(flagged_code) is False:
            vulnerable_set.discard(flagged_code)

# input: a string of code 
# output: a set of vulnerabilities found in the given string of code 
def check_for_vulnerability(code_to_scan):

    # RegExs that should match SQL injection vulnerabilities
    percent_match = "\".*\"\s*%"
    f_string_match = "f\".*{.*}.*\""
    format_string_match = "\".*{.*}.*\"\.format\(.*\)"

    vulnerable_match_list1 = re.findall(percent_match, code_to_scan)
    vulnerable_match_list2 = re.findall(f_string_match, code_to_scan)
    vulnerable_match_list3 = re.findall(format_string_match, code_to_scan)

    vulnerable_results = set(vulnerable_match_list1 + vulnerable_match_list2 + vulnerable_match_list3)
    return vulnerable_results

# input: code that was flagged by regular expression matching 
# output: a boolean. True if code contains a SQL keyword. False otherwise 
def check_statements_for_SQL_query_words(flagged_code):
    
    flagged_code = flagged_code.lower() # make lowercase

    SQL_words = ["select", "update", "delete", "insert"]
    for SQL_keyword in SQL_words:
        if SQL_keyword in flagged_code:
            return True
    return False 

if __name__ == "__main__":

    directories_not_to_inspect = set()
    directories_not_to_inspect.add("venv")

    files_to_scan = getSubFiles(blacklisted_directories = directories_not_to_inspect)
    if files_to_scan is None or len(files_to_scan) == 0:
        print("No Python files to scan in this directory")
        
    """
    for file in files_to_scan:
        print(file)
    """

    vulnerabilities = scan_files(files_to_scan)
    print() 
    print("~~~ Vulnerabilities ~~~")
    for vulnerability in vulnerabilities:
        file_name, vulnerability_set = vulnerability
        print(file_name, vulnerability_set)


