from vulnerability_scanner import check_for_vulnerability, parse_vulnerable_set

class TestVulnerabilityMatch:
    
    ########################################### Vulnerabilities #######################################
    
    def test_vulnerable1(self):
        SQL_query = "cursor.execute(\"Select * FROM users WHERE username = '%s'\" % username)"
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1
    
    def test_vulnerable2(self):
        SQL_query = "cursor.execute(\"Select * FROM users WHERE username = '%s' AND password = '%s' \" % (username, password))" 
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1

    def test_vulnerable3(self):
        SQL_query = "events = db.execute(\"SELECT * FROM Events WHERE organizer_id = '%s'\" % organizer_email).fetchall()"
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1

    def test_vulnerable4(self):
        SQL_query = "events = db.execute(\"SELECT * FROM Events WHERE organizer_id = '%s' AND game_id = '%s'\" % (organizer_id, game_id)).fetchall()"
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1

    def test_vulnerable5(self):
        SQL_query = "\"insert into example values('%s', %d)\" % (\"string\", 8390823904)"
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1

    def test_vulnerable6(self):
        SQL_query = "f\"SELECT * FROM users WHERE username = {username}\""
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1

    def test_vulnerable7(self):
        SQL_query = "f\"SELECT * FROM users WHERE username = {username} and password = {password} \""
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1

    def test_vulnerable8(self):
        SQL_query =  "f\"DELETE FROM pets WHERE pet_id = {pet_id}\""
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1

    def test_vulnerable9(self):
        SQL_query = "f\"UPDATE dinosaurs SET is_carnivorous = 1 WHERE dino_id = {dino_id}\""
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1
    
    def test_vulnerable10(self):
        SQL_query = "\"SELECT * FROM supplies WHERE id = {0}\".format(id)"
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1

    def test_vulnerable11(self):
        SQL_query = "\"SELECT * FROM supplies WHERE id = {} and name = {}\".format(id, name)"
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 1

    ########################################### Non-Vulnerabilities #######################################

    def test_non_vulnerable1(self):
        SQL_query = "cursor.execute(\"Select * FROM users WHERE username = '%s'\" , username)"
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 0

    def test_non_vulnerable2(self):
        SQL_query = "cursor.execute(\"Select * FROM users WHERE username = '%s' and password = '%s'\" , (username, password))"
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 0

    def test_non_vulnerable3(self):
        SQL_query = "sqlalchemy.sql.text(\"SELECT * FROM users WHERE username = :username and password = :password\""
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 0
    
    def test_non_vulnerable4(self):
        SQL_query = "cursor.execute(\"SELECT * FROM users WHERE username = ? AND password = ?\", (username, password))"
        vulnerability_set = check_for_vulnerability(SQL_query)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 0

    def test_non_vulnerable5(self):
        statement = "\"My dog's name is {name}. She is {age} years old.\".format(name = \"Lilac\", age = 4)\""
        vulnerability_set = check_for_vulnerability(statement)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 0

    def test_non_vulnerable6(self):
        statement = "\"My dog's name is {0}. She is {1} years old.\".format(\"Lilac\", 4)\""
        vulnerability_set = check_for_vulnerability(statement)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 0

    def test_non_vulnerable7(self):
        statement = "\"My dog's name is {}. She is {} years old.\".format(\"Lilac\", 4)\""
        vulnerability_set = check_for_vulnerability(statement)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 0

    def test_non_vulnerable8(self):
        statement = "f\"Welcome to {restaurant_name}\""
        vulnerability_set = check_for_vulnerability(statement)
        parse_vulnerable_set(vulnerability_set)
        assert len(vulnerability_set) == 0
